AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a CodePipeline for a CI/CD pipeline
Parameters:

  #Default project name that
  #the git repo will be called
  ProjectName:
    Type: String
    Default: homepage

  RepositoryBranch:
    Type: String
    Default: dev

  RepositoryDescription:
    Type: String
    Default: Personal Website hosted using S3

Resources:
  #################################
  #Everything from the InputArtifact
  #and OutputArtifact for all CodeBuild stages
  #will be stored in this s3 bucket
  #################################
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName:
          !Join ['', ['artifacts-bucket-', !Ref ProjectName]]
      Tags:
        -
          Key: stage
          Value: dev
        -
          Key: retain
          Value: "false"
        -
          Key: project
          Value: !Ref ProjectName
        -
          Key: usedby
          Value: CodePipelineBuildStages

  GitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
        RepositoryDescription:
            !Join [' ', ['Repo for ', !Ref ProjectName,
            !Ref RepositoryDescription]]
        RepositoryName: !Ref ProjectName

####################
#Role assumed by cloudformation
#in stage 2 of the CodePipeline to
#create/update the templates/prod_resource_import.yml stack
####################
  ProdCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
      Path: /
      #Ability to create record sets in Route53
      Policies:
          - PolicyName: DeployRoute53
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: RecordSetsOneHostedZone
                  Effect: Allow
                  Action:
                    - route53:GetHostedZone
                    - route53:ListResourceRecordSets
                    - route53:ListHostedZones
                    - route53:GetChange
                  Resource:
                    - "*"

                - Sid: RequestAcmCertificate
                  Effect: Allow
                  Action:
                    - acm:RequestCertificate
                    - acm:DeleteCertificate
                    - acm:DescribeCertificate
                  Resource:
                    - "*"
                #Change Record Sets but limit
                #to one hosted zone
                - Sid: WriteRecordSetsOneHostedZone
                  Effect: Allow
                  Action:
                    - route53:ChangeResourceRecordSets
                #Name of the hosted zone to allow Record
                #sets to be changed on
                  Resource:
                    - "arn:aws:route53:::hostedzone/Z3K3UR6983C2YB"
        #policy needed for serverless transform
          - PolicyName: BackendDeployPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: RecordSetsOneHostedZone
                  Effect: Allow
                  Action:
                    - cloudformation:CreateChangeSet
                    #- cloudformation:ExecuteChangeSet
                  Resource:
                    - "*"
                #secretsmanager creation privleges
                - Sid: !Join ['', [!Ref ProjectName,'SecretsMangerDeploy']]
                  Effect: Allow
                  Action:
                    - secretsmanager:CreateSecret # pragma: allowlist secret
                    - secretsmanager:DeleteSecret # pragma: allowlist secret
                    - secretsmanager:TagResource # pragma: allowlist secret
                    - secretsmanager:UpdateSecret # pragma: allowlist secret
                  Resource:
                    - "*"
                #create vpc privleges
                - Sid: !Join ['', [!Ref ProjectName,'VpcDeploy']]
                  Effect: Allow
                  Action:
                    - ec2:CreateVpc
                    - ec2:CreateSubnet
                    - ec2:DeleteSubnet
                    - ec2:DeleteVpc
                    - ec2:DescribeVpcs
                    - ec2:ModifyVpcAttribute
                    - ec2:createTags
                    - ec2:DescribeAvailabilityZones
                    - ec2:DescribeAccountAttributes
                    - ec2:DescribeSubnets
                    - ec2:CreateRouteTable
                    - ec2:DeleteRouteTable
                    - ec2:DescribeRouteTables
                  Resource:
                    - "*"

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Path: /
      Policies:
          - PolicyName: PassIamRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: IAMallow
                  Effect: Allow
                  #######################################
                  #Allowing iam role manipulation
                  #
                  #######################################
                  Action:
                    - iam:PassRole
                    - iam:CreateRole
                    - iam:GetRole
                    - iam:UpdateAssumeRolePolicy
                    - iam:DetachRolePolicy
                    - iam:DeleteRolePolicy
                    - iam:PutRolePolicy
                  Resource:
                    - "*"

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      #List of Policies for Code Pipeline
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
          - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
          - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Policies:
          - PolicyName: PipelinePassRole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: IamPassRoleAllow
                  Effect: Allow
                  #######################################
                  #Allowing lambda to perform a PutItem on
                  #DynamoDB
                  #
                  #######################################
                  Action:
                    - iam:PassRole
                  Resource:
                    - "*"


Outputs:
  CodeCommitURL:
    Description: CodeCommit URL
    Value:
      Fn::Join:
        - ""
        - - "https://console.aws.amazon.com/codepipeline/home?region="
          - Ref: AWS::Region
          - "#/repository/"
          - Ref: AWS::StackName
          - "/browse/HEAD/--/"
  GitRepoName:
    Description: Name of the git repository
    Value: !GetAtt GitRepo.Name
