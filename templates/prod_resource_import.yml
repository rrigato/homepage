---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Importing existing S3 Bucket and Route53 hosted zone to cloudformation
Parameters:

  BucketName:
    Type: String
    Default: ryanrigato.com
    Description: The name for the bucket hosting the static website


Conditions:
  RetainResourcesCreated:
      !Equals [ !Ref BucketName, ryanrigato.com ]

Resources:
  WebsiteBucket:
    Condition: RetainResourcesCreated
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      LoggingConfiguration:
        DestinationBucketName: !Join
                      - '.'
                      #The second argument is a list
                      - - 'logs'
                        - !Ref BucketName

        LogFilePrefix: root/
      Tags:
          -
              Key: websiteReason
              Value: portfolio
          -
              Key: use
              Value: website
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
    Type: "AWS::S3::Bucket"

##################################
#Hosted Zone that handles domain name
#mapping, originally created outside of
#cloudformation but imported into
#cloudformation in March, 2020
##################################
HomepageDns:
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneName: example.com.
    Comment: Weighted RR for my frontends.
    RecordSets:
    - Name: mysite.example.com.
      Type: CNAME
      TTL: '900'
      SetIdentifier: Frontend One
      Weight: '4'
      ResourceRecords:
      - example-ec2.amazonaws.com
    - Name: mysite.example.com.
      Type: CNAME
      TTL: '900'
      SetIdentifier: Frontend Two
      Weight: '6'
      ResourceRecords:
      - example-ec2-larger.amazonaws.com

###########################
#Content delivery network
#for the static (html/css/js) content
#
##########################
  StaticWebpageCdn:
    DependsOn: CloudFrontOai
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: CDN for S3-backed website
        #Essientially a cname record to
        #what you want your url name to be
        Aliases:
          - !Join
              - '.'
              #domain without www.
              #ex: ryanrigato.com
              #remove 'test' for prod
              - - 'test'
                - !Ref BucketName
        #remove
          # - !Join
          #     - '.'
          #     #domain with www.
          #     #ex: www.ryanrigato.com
          #     - - 'www'
          #     #remove 'test' for prod
          #       - 'test'
          #       - !Ref BucketName
        Enabled: true
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: s3-homepage-origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        #Origin is an S3 bucket
        Origins:
        #############
        #Domain name of S3 Origin:
        #Ex: 'www.ryanrigato.com.s3.amazonaws.com'
        #############
          - DomainName: !Join
                  - '.'
                  #domain with www.
                  #ex: www.ryanrigato.com
                  #remove 'www for prod'
                  - - 'www'
                    - !Ref BucketName
                    - 's3.amazonaws.com'
            Id: s3-homepage-origin
            S3OriginConfig:
                #Substitutes the origin access identity CloudFrontOai created below
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOai}"
        ViewerCertificate:
          AcmCertificateArn: !Join ['', ['arn:aws:acm:us-east-1:', !Ref 'AWS::AccountId', ':certificate/111bbdc6-2f76-4b67-adf7-393f6391e6e7']]

          #Server Name Identification (SNI) =
          #Allow cloudfront edge servers to
          #present multiple ssl certs to client, this is
          #lower cost than having only 1 ssl cert per CloudFront
          #point of prescense
          SslSupportMethod: sni-only
        #lowest price class
        PriceClass: PriceClass_100

  #OAI ensures an s3 public statically hosted bucket can
  #only be accessed through its cloudfront distribution
  CloudFrontOai:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI to ensure S3 bucket can only be accessed from distribution
